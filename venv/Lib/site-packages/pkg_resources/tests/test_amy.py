from unittest import TestCase
from qa_selenium.amy import Amy
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from random import sample

class TestAmy(TestCase):
    def setUp(self):
        """logs in to gmail and adds all emails in page except the last, in random order """
        service_chrome=Service(r"C:\Seleniumx\chromedriver.exe")
        self.Tester=Amy(webdriver.Chrome(service=service_chrome))
        self.Tester.driver.get("https://www.gmail.com")
        self.Tester.driver.maximize_window()
        email='TesterT1387@gmail.com'
        password='TesterT11338877'
        self.Tester.login_to_gmail(email,password)

        self.total=self.Tester.total_email_count()
        if self.total>50:
            total=50
        if self.total<=50:
             for n in sample(range(1,self.total+1),self.total-1):
                 self.Tester.add_email(n)


    def test1(self):
        """Each email coming into the system should have a priority, indicating the index of the message"""

        for priority in self.Tester.email_priority_dict.values():
            self.assertTrue(priority != None)

        self.assertTrue(len(self.Tester.email_list)==len(list(self.Tester.email_priority_dict.keys())))
        self.assertTrue(len(self.Tester.priorities)==len(list(self.Tester.email_priority_dict.values())))

        self.assertTrue(list(self.Tester.email_priority_dict.items()) ==
                        sorted(self.Tester.email_priority_dict.items(), key=lambda x:x[1], reverse=True))
        self.assertTrue(self.Tester.email_list==list(self.Tester.email_priority_dict.keys()))
        self.assertTrue(self.Tester.priorities==list(self.Tester.email_priority_dict.values()))

    def test2_3(self):
        """Index 0 is the most important email,
        N-1 is the least important email"""
        most_important_email=self.Tester.email_list[0]
        self.assertEqual(self.Tester.email_priority_dict[most_important_email],max(self.Tester.priorities))

        least_important_email=self.Tester.email_list[len(self.Tester.email_list)-1]
        self.assertEqual(self.Tester.email_priority_dict[least_important_email],min(self.Tester.priorities))

    def test5(self):
        """If another email arrives, when the box is already full,
         and incoming email's priority is higher than least important email one,
          than the least important email is dropped and email box is reorganized"""

        new_email_priority_and_subject=self.Tester.email_contents(6)
        new_email_subject=new_email_priority_and_subject[0]
        new_email_priority=new_email_priority_and_subject[2]

        index=len(self.Tester.priorities)
        for i in self.Tester.priorities:
            if new_email_priority>=i:
                index-=1
        if index==len(self.Tester.priorities):
            index=None

        self.Tester.add_email(6)

        if index!=None:
            self.assertTrue(self.Tester.priorities[index]==new_email_priority)
            self.assertEqual(self.Tester.email_list.index(new_email_subject),index)
        else:
            self.assertTrue(new_email_priority not in self.Tester.priorities)

    def test6(self):
        """Priority is a number in the range [0,1] (including 0 and 1)"""
        for p in self.Tester.priorities:
            self.assertTrue(1>=p>=0)

    def test7(self):
        """Email box should be always reorganized according to the priority metric
        ---adds the last email in page and checks if amy is always organizing emails"""
        self.Tester.add_email(self.total)
        before=self.Tester.email_list
        self.Tester.order_emails()
        after=self.Tester.email_list
        self.assertEqual(before,after)



